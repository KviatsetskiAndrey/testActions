// Code generated by MockGen. DO NOT EDIT.
// Source: ./limit.go

// Package mock_limit is a generated GoMock package.
package mock_limit

import (
	limit "github.com/Confialink/wallet-accounts/internal/limit"
	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
	reflect "reflect"
)

// MockLimit is a mock of Limit interface
type MockLimit struct {
	ctrl     *gomock.Controller
	recorder *MockLimitMockRecorder
}

// MockLimitMockRecorder is the mock recorder for MockLimit
type MockLimitMockRecorder struct {
	mock *MockLimit
}

// NewMockLimit creates a new mock instance
func NewMockLimit(ctrl *gomock.Controller) *MockLimit {
	mock := &MockLimit{ctrl: ctrl}
	mock.recorder = &MockLimitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLimit) EXPECT() *MockLimitMockRecorder {
	return m.recorder
}

// Available mocks base method
func (m *MockLimit) Available() limit.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Available")
	ret0, _ := ret[0].(limit.Value)
	return ret0
}

// Available indicates an expected call of Available
func (mr *MockLimitMockRecorder) Available() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Available", reflect.TypeOf((*MockLimit)(nil).Available))
}

// WithinLimit mocks base method
func (m *MockLimit) WithinLimit(amount limit.CurrencyAmount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithinLimit", amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithinLimit indicates an expected call of WithinLimit
func (mr *MockLimitMockRecorder) WithinLimit(amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithinLimit", reflect.TypeOf((*MockLimit)(nil).WithinLimit), amount)
}

// MockCurrencyAmount is a mock of CurrencyAmount interface
type MockCurrencyAmount struct {
	ctrl     *gomock.Controller
	recorder *MockCurrencyAmountMockRecorder
}

// MockCurrencyAmountMockRecorder is the mock recorder for MockCurrencyAmount
type MockCurrencyAmountMockRecorder struct {
	mock *MockCurrencyAmount
}

// NewMockCurrencyAmount creates a new mock instance
func NewMockCurrencyAmount(ctrl *gomock.Controller) *MockCurrencyAmount {
	mock := &MockCurrencyAmount{ctrl: ctrl}
	mock.recorder = &MockCurrencyAmountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCurrencyAmount) EXPECT() *MockCurrencyAmountMockRecorder {
	return m.recorder
}

// Amount mocks base method
func (m *MockCurrencyAmount) Amount() decimal.Decimal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Amount")
	ret0, _ := ret[0].(decimal.Decimal)
	return ret0
}

// Amount indicates an expected call of Amount
func (mr *MockCurrencyAmountMockRecorder) Amount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Amount", reflect.TypeOf((*MockCurrencyAmount)(nil).Amount))
}

// CurrencyCode mocks base method
func (m *MockCurrencyAmount) CurrencyCode() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrencyCode")
	ret0, _ := ret[0].(string)
	return ret0
}

// CurrencyCode indicates an expected call of CurrencyCode
func (mr *MockCurrencyAmountMockRecorder) CurrencyCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrencyCode", reflect.TypeOf((*MockCurrencyAmount)(nil).CurrencyCode))
}

// MockValue is a mock of Value interface
type MockValue struct {
	ctrl     *gomock.Controller
	recorder *MockValueMockRecorder
}

// MockValueMockRecorder is the mock recorder for MockValue
type MockValueMockRecorder struct {
	mock *MockValue
}

// NewMockValue creates a new mock instance
func NewMockValue(ctrl *gomock.Controller) *MockValue {
	mock := &MockValue{ctrl: ctrl}
	mock.recorder = &MockValueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValue) EXPECT() *MockValueMockRecorder {
	return m.recorder
}

// NoLimit mocks base method
func (m *MockValue) NoLimit() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NoLimit")
	ret0, _ := ret[0].(bool)
	return ret0
}

// NoLimit indicates an expected call of NoLimit
func (mr *MockValueMockRecorder) NoLimit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NoLimit", reflect.TypeOf((*MockValue)(nil).NoLimit))
}

// CurrencyAmount mocks base method
func (m *MockValue) CurrencyAmount() limit.CurrencyAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrencyAmount")
	ret0, _ := ret[0].(limit.CurrencyAmount)
	return ret0
}

// CurrencyAmount indicates an expected call of CurrencyAmount
func (mr *MockValueMockRecorder) CurrencyAmount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrencyAmount", reflect.TypeOf((*MockValue)(nil).CurrencyAmount))
}
