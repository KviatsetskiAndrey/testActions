// Code generated by MockGen. DO NOT EDIT.
// Source: ./permission.go

// Package mock_transfers is a generated GoMock package.
package mock_transfers

import (
	model "github.com/Confialink/wallet-accounts/internal/modules/request/model"
	transfers "github.com/Confialink/wallet-accounts/internal/modules/request/transfers"
	types "github.com/Confialink/wallet-accounts/internal/modules/transaction/types"
	gomock "github.com/golang/mock/gomock"
	gorm "github.com/jinzhu/gorm"
	reflect "reflect"
)

// MockPermissionChecker is a mock of PermissionChecker interface
type MockPermissionChecker struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionCheckerMockRecorder
}

// MockPermissionCheckerMockRecorder is the mock recorder for MockPermissionChecker
type MockPermissionCheckerMockRecorder struct {
	mock *MockPermissionChecker
}

// NewMockPermissionChecker creates a new mock instance
func NewMockPermissionChecker(ctrl *gomock.Controller) *MockPermissionChecker {
	mock := &MockPermissionChecker{ctrl: ctrl}
	mock.recorder = &MockPermissionCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPermissionChecker) EXPECT() *MockPermissionCheckerMockRecorder {
	return m.recorder
}

// Check mocks base method
func (m *MockPermissionChecker) Check() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check")
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check
func (mr *MockPermissionCheckerMockRecorder) Check() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockPermissionChecker)(nil).Check))
}

// Name mocks base method
func (m *MockPermissionChecker) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockPermissionCheckerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockPermissionChecker)(nil).Name))
}

// MockPermissionFactory is a mock of PermissionFactory interface
type MockPermissionFactory struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionFactoryMockRecorder
}

// MockPermissionFactoryMockRecorder is the mock recorder for MockPermissionFactory
type MockPermissionFactoryMockRecorder struct {
	mock *MockPermissionFactory
}

// NewMockPermissionFactory creates a new mock instance
func NewMockPermissionFactory(ctrl *gomock.Controller) *MockPermissionFactory {
	mock := &MockPermissionFactory{ctrl: ctrl}
	mock.recorder = &MockPermissionFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPermissionFactory) EXPECT() *MockPermissionFactoryMockRecorder {
	return m.recorder
}

// CreatePermission mocks base method
func (m *MockPermissionFactory) CreatePermission(request *model.Request, details types.Details) (transfers.PermissionChecker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePermission", request, details)
	ret0, _ := ret[0].(transfers.PermissionChecker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePermission indicates an expected call of CreatePermission
func (mr *MockPermissionFactoryMockRecorder) CreatePermission(request, details interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermission", reflect.TypeOf((*MockPermissionFactory)(nil).CreatePermission), request, details)
}

// WrapContext mocks base method
func (m *MockPermissionFactory) WrapContext(db *gorm.DB) transfers.PermissionFactory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WrapContext", db)
	ret0, _ := ret[0].(transfers.PermissionFactory)
	return ret0
}

// WrapContext indicates an expected call of WrapContext
func (mr *MockPermissionFactoryMockRecorder) WrapContext(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WrapContext", reflect.TypeOf((*MockPermissionFactory)(nil).WrapContext), db)
}
