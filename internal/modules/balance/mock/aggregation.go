// Code generated by MockGen. DO NOT EDIT.
// Source: ./aggregation.go

// Package mock_balance is a generated GoMock package.
package mock_balance

import (
	balance "github.com/Confialink/wallet-accounts/internal/modules/balance"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAggregator is a mock of Aggregator interface
type MockAggregator struct {
	ctrl     *gomock.Controller
	recorder *MockAggregatorMockRecorder
}

// MockAggregatorMockRecorder is the mock recorder for MockAggregator
type MockAggregatorMockRecorder struct {
	mock *MockAggregator
}

// NewMockAggregator creates a new mock instance
func NewMockAggregator(ctrl *gomock.Controller) *MockAggregator {
	mock := &MockAggregator{ctrl: ctrl}
	mock.recorder = &MockAggregatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAggregator) EXPECT() *MockAggregatorMockRecorder {
	return m.recorder
}

// Aggregate mocks base method
func (m *MockAggregator) Aggregate() (balance.AggregationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Aggregate")
	ret0, _ := ret[0].(balance.AggregationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Aggregate indicates an expected call of Aggregate
func (mr *MockAggregatorMockRecorder) Aggregate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aggregate", reflect.TypeOf((*MockAggregator)(nil).Aggregate))
}
