// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	model "github.com/Confialink/wallet-accounts/internal/modules/currency/model"
	service "github.com/Confialink/wallet-accounts/internal/modules/currency/service"
	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
	reflect "reflect"
)

// MockCurrenciesServiceInterface is a mock of CurrenciesServiceInterface interface
type MockCurrenciesServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCurrenciesServiceInterfaceMockRecorder
}

// MockCurrenciesServiceInterfaceMockRecorder is the mock recorder for MockCurrenciesServiceInterface
type MockCurrenciesServiceInterfaceMockRecorder struct {
	mock *MockCurrenciesServiceInterface
}

// NewMockCurrenciesServiceInterface creates a new mock instance
func NewMockCurrenciesServiceInterface(ctrl *gomock.Controller) *MockCurrenciesServiceInterface {
	mock := &MockCurrenciesServiceInterface{ctrl: ctrl}
	mock.recorder = &MockCurrenciesServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCurrenciesServiceInterface) EXPECT() *MockCurrenciesServiceInterfaceMockRecorder {
	return m.recorder
}

// Convert mocks base method
func (m *MockCurrenciesServiceInterface) Convert(amount decimal.Decimal, currencyCodeFrom, currencyCodeTo string) (decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Convert", amount, currencyCodeFrom, currencyCodeTo)
	ret0, _ := ret[0].(decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Convert indicates an expected call of Convert
func (mr *MockCurrenciesServiceInterfaceMockRecorder) Convert(amount, currencyCodeFrom, currencyCodeTo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Convert", reflect.TypeOf((*MockCurrenciesServiceInterface)(nil).Convert), amount, currencyCodeFrom, currencyCodeTo)
}

// ConvertToFiat mocks base method
func (m *MockCurrenciesServiceInterface) ConvertToFiat(amount decimal.Decimal, currencyCodeFrom string) (decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertToFiat", amount, currencyCodeFrom)
	ret0, _ := ret[0].(decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertToFiat indicates an expected call of ConvertToFiat
func (mr *MockCurrenciesServiceInterfaceMockRecorder) ConvertToFiat(amount, currencyCodeFrom interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertToFiat", reflect.TypeOf((*MockCurrenciesServiceInterface)(nil).ConvertToFiat), amount, currencyCodeFrom)
}

// GetByCode mocks base method
func (m *MockCurrenciesServiceInterface) GetByCode(arg0 string) (*model.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCode", arg0)
	ret0, _ := ret[0].(*model.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCode indicates an expected call of GetByCode
func (mr *MockCurrenciesServiceInterfaceMockRecorder) GetByCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCode", reflect.TypeOf((*MockCurrenciesServiceInterface)(nil).GetByCode), arg0)
}

// GetCurrenciesRateValueByCodes mocks base method
func (m *MockCurrenciesServiceInterface) GetCurrenciesRateValueByCodes(currencyCodeFrom, currencyCodeTo string) (decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrenciesRateValueByCodes", currencyCodeFrom, currencyCodeTo)
	ret0, _ := ret[0].(decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrenciesRateValueByCodes indicates an expected call of GetCurrenciesRateValueByCodes
func (mr *MockCurrenciesServiceInterfaceMockRecorder) GetCurrenciesRateValueByCodes(currencyCodeFrom, currencyCodeTo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrenciesRateValueByCodes", reflect.TypeOf((*MockCurrenciesServiceInterface)(nil).GetCurrenciesRateValueByCodes), currencyCodeFrom, currencyCodeTo)
}

// GetCurrenciesRateByCodes mocks base method
func (m *MockCurrenciesServiceInterface) GetCurrenciesRateByCodes(currencyCodeFrom, currencyCodeTo string) (*service.Rate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrenciesRateByCodes", currencyCodeFrom, currencyCodeTo)
	ret0, _ := ret[0].(*service.Rate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrenciesRateByCodes indicates an expected call of GetCurrenciesRateByCodes
func (mr *MockCurrenciesServiceInterfaceMockRecorder) GetCurrenciesRateByCodes(currencyCodeFrom, currencyCodeTo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrenciesRateByCodes", reflect.TypeOf((*MockCurrenciesServiceInterface)(nil).GetCurrenciesRateByCodes), currencyCodeFrom, currencyCodeTo)
}
