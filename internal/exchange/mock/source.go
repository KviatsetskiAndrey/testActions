// Code generated by MockGen. DO NOT EDIT.
// Source: ./source.go

// Package mock_exchange is a generated GoMock package.
package mock_exchange

import (
	exchange "github.com/Confialink/wallet-accounts/internal/exchange"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRateSource is a mock of RateSource interface
type MockRateSource struct {
	ctrl     *gomock.Controller
	recorder *MockRateSourceMockRecorder
}

// MockRateSourceMockRecorder is the mock recorder for MockRateSource
type MockRateSourceMockRecorder struct {
	mock *MockRateSource
}

// NewMockRateSource creates a new mock instance
func NewMockRateSource(ctrl *gomock.Controller) *MockRateSource {
	mock := &MockRateSource{ctrl: ctrl}
	mock.recorder = &MockRateSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRateSource) EXPECT() *MockRateSourceMockRecorder {
	return m.recorder
}

// FindRate mocks base method
func (m *MockRateSource) FindRate(base, reference string) (exchange.Rate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRate", base, reference)
	ret0, _ := ret[0].(exchange.Rate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRate indicates an expected call of FindRate
func (mr *MockRateSourceMockRecorder) FindRate(base, reference interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRate", reflect.TypeOf((*MockRateSource)(nil).FindRate), base, reference)
}

// MockRateReceiver is a mock of RateReceiver interface
type MockRateReceiver struct {
	ctrl     *gomock.Controller
	recorder *MockRateReceiverMockRecorder
}

// MockRateReceiverMockRecorder is the mock recorder for MockRateReceiver
type MockRateReceiverMockRecorder struct {
	mock *MockRateReceiver
}

// NewMockRateReceiver creates a new mock instance
func NewMockRateReceiver(ctrl *gomock.Controller) *MockRateReceiver {
	mock := &MockRateReceiver{ctrl: ctrl}
	mock.recorder = &MockRateReceiverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRateReceiver) EXPECT() *MockRateReceiverMockRecorder {
	return m.recorder
}

// Set mocks base method
func (m *MockRateReceiver) Set(rate exchange.Rate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", rate)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockRateReceiverMockRecorder) Set(rate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRateReceiver)(nil).Set), rate)
}

// MockRateSourceAndReceiver is a mock of RateSourceAndReceiver interface
type MockRateSourceAndReceiver struct {
	ctrl     *gomock.Controller
	recorder *MockRateSourceAndReceiverMockRecorder
}

// MockRateSourceAndReceiverMockRecorder is the mock recorder for MockRateSourceAndReceiver
type MockRateSourceAndReceiverMockRecorder struct {
	mock *MockRateSourceAndReceiver
}

// NewMockRateSourceAndReceiver creates a new mock instance
func NewMockRateSourceAndReceiver(ctrl *gomock.Controller) *MockRateSourceAndReceiver {
	mock := &MockRateSourceAndReceiver{ctrl: ctrl}
	mock.recorder = &MockRateSourceAndReceiverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRateSourceAndReceiver) EXPECT() *MockRateSourceAndReceiverMockRecorder {
	return m.recorder
}

// FindRate mocks base method
func (m *MockRateSourceAndReceiver) FindRate(base, reference string) (exchange.Rate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRate", base, reference)
	ret0, _ := ret[0].(exchange.Rate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRate indicates an expected call of FindRate
func (mr *MockRateSourceAndReceiverMockRecorder) FindRate(base, reference interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRate", reflect.TypeOf((*MockRateSourceAndReceiver)(nil).FindRate), base, reference)
}

// Set mocks base method
func (m *MockRateSourceAndReceiver) Set(rate exchange.Rate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", rate)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockRateSourceAndReceiverMockRecorder) Set(rate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRateSourceAndReceiver)(nil).Set), rate)
}
